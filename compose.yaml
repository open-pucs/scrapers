x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: Dockerfile.airflow-standalone

  environment: &airflow-common-env
    AIRFLOW_PASSWORD: ${AIRFLOW_PASSWORD}
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@airflow-postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__MAX_MAP_LENGTH: 1048576 # 2^20 instead of 2^10

    OPENSCRAPERS_SQL_DB_CONNECTION: postgresql+asyncpg://postgres:${OPENSCRAPERS_SQL_PASSWORD}@openscrapers-postgres:5432/public
    OPENSCRAPERS_S3_OBJECT_BUCKET: ${OPENSCRAPERS_S3_OBJECT_BUCKET}
    OPENSCRAPERS_S3_ACCESS_KEY: ${OPENSCRAPERS_S3_ACCESS_KEY}
    OPENSCRAPERS_S3_SECRET_KEY: ${OPENSCRAPERS_S3_SECRET_KEY}
    # AIRFLOW__CORE__FERNET_KEY: ""
    # AIRFLOW__CORE__LOAD_EXAMPLES: "true"
    # AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session"
    # AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
    # _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./airflow_dags:/opt/airflow/dags
    - ./openpuc_scrapers:/app/openpuc_scrapers
    # - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    # - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    # - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  # user: "${AIRFLOW_UID:-50000}:0"
  user: "50000:0"
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    airflow-postgres:
      condition: service_healthy

x-openscraper-env-variables:
  &openscraper-env-variables # - OPENSCRAPERS_SQL_DB_CONNECTION: postgresql://postgres:dolphins@openscrapers-postgres:5432/postgres
  OPENSCRAPERS_SQL_DB_CONNECTION: postgresql+asyncpg://postgres:${OPENSCRAPERS_SQL_PASSWORD}@openscrapers-postgres:5432/public
  OPENSCRAPERS_S3_OBJECT_BUCKET: ${OPENSCRAPERS_S3_OBJECT_BUCKET}
  OPENSCRAPERS_S3_ACCESS_KEY: ${OPENSCRAPERS_S3_ACCESS_KEY}
  OPENSCRAPERS_S3_SECRET_KEY: ${OPENSCRAPERS_S3_SECRET_KEY}

services:
  # OpenScrapers Services
  openscrapers-postgres:
    image: postgres:17.4-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${OPENSCRAPERS_SQL_PASSWORD}
      - POSTGRES_DB=public
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - ./volumes/openscrapers-postgres:/var/lib/postgresql/data
    expose:
      - 5432
    ports:
      - 5432:5432

  openscrapers-api:
    build:
      context: .
      dockerfile: Dockerfile.server
    depends_on:
      - openscrapers-postgres
    labels:
      - "traefik.enable=true"
      - "traefik.namespace=openscrapers"
      - "traefik.http.routers.openscrapers-api.rule=Host(`${DOMAIN}`) && PathPrefix(`/`)"
      - "traefik.http.routers.blog.tls.domains[0].main=${DOMAIN}"
      - "traefik.http.routers.openscrapers-api.entrypoints=websecure"
      - "traefik.http.routers.openscrapers-api.tls.certresolver=myresolver"
      - "traefik.http.routers.whoami.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.routers.whoami.tls.certresolver=myresolver"
    volumes:
      - ./openpuc_scrapers:/app/openpuc_scrapers
    expose:
      - 8000
    ports:
      - 8002:8000
    environment:
      <<: *openscraper-env-variables
  reverse-proxy:
    profiles: ["prod"]
    image: traefik:v3.0
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.constraints=Label(`traefik.namespace`,`openscrapers`)"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=mbright@kessler.xyz"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8083:8080"
    volumes:
      - "./volumes/letsencrypt:/letsencrypt"
      - /var/run/docker.sock:/var/run/docker.sock
  # # Airflow Services
  airflow-postgres:
    # image: postgres:13
    # Original image used postgres 13, if anything appears wrong, I think its a good idea to revert to the old image
    image: postgres:17.4-alpine
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - ./volumes/airflow-postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    image: valkey/valkey:alpine
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-standalone:
    <<: *airflow-common
    ports:
      - "3030:8081"
    expose:
      - 8081
    labels:
      - "traefik.enable=true"
      - "traefik.namespace=openscrapers"
      - "traefik.http.routers.openscrapers-airflow.rule=Host(`${AIRFLOW_DOMAIN}`) && PathPrefix(`/`)"
      - "traefik.http.routers.openscrapers-airflow.entrypoints=websecure"
      - "traefik.http.routers.openscrapers-airflow.tls.certresolver=myresolver"
      - "traefik.http.services.openscrapers-airflow.loadbalancer.server.port=8081"
