x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: Dockerfile.airflow-standalone

  environment: &airflow-common-env
    AIRFLOW_PASSWORD: ${AIRFLOW_PASSWORD}
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:${AIRFLOW_SQL_DB_PASSWORD}@airflow-postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@airflow-postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0

    OPENSCRAPERS_SQL_DB_CONNECTION: postgresql+asyncpg://postgres:${OPENSCRAPERS_SQL_PASSWORD}@openscrapers-postgres:5432/public
    OPENSCRAPERS_S3_OBJECT_BUCKET: ${OPENSCRAPERS_S3_OBJECT_BUCKET}
    OPENSCRAPERS_S3_ACCESS_KEY: ${OPENSCRAPERS_S3_ACCESS_KEY}
    OPENSCRAPERS_S3_SECRET_KEY: ${OPENSCRAPERS_S3_SECRET_KEY}
    # AIRFLOW__CORE__FERNET_KEY: ""
    # AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    # AIRFLOW__CORE__LOAD_EXAMPLES: "true"
    # AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session"
    # AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
    # _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./airflow_dags:/opt/airflow/dags
    - ./openpuc_scrapers:/app/openpuc_scrapers
    # - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    # - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    # - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  # user: "${AIRFLOW_UID:-50000}:0"
  user: "50000:0"
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    airflow-postgres:
      condition: service_healthy

x-openscraper-env-variables:
  &openscraper-env-variables # - OPENSCRAPERS_SQL_DB_CONNECTION: postgresql://postgres:dolphins@openscrapers-postgres:5432/postgres
  OPENSCRAPERS_SQL_DB_CONNECTION: postgresql+asyncpg://postgres:${OPENSCRAPERS_SQL_PASSWORD}@openscrapers-postgres:5432/public
  OPENSCRAPERS_S3_OBJECT_BUCKET: ${OPENSCRAPERS_S3_OBJECT_BUCKET}
  OPENSCRAPERS_S3_ACCESS_KEY: ${OPENSCRAPERS_S3_ACCESS_KEY}
  OPENSCRAPERS_S3_SECRET_KEY: ${OPENSCRAPERS_S3_SECRET_KEY}

services:
  # OpenScrapers Services
  openscrapers-postgres:
    image: postgres:17.4-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${OPENSCRAPERS_SQL_PASSWORD}
      - POSTGRES_DB=public
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - ./volumes/openscrapers-postgres:/var/lib/postgresql/data
    expose:
      - 5432
    ports:
      - 5432:5432

  openscrapers-api:
    build:
      context: .
      dockerfile: Dockerfile.server
    depends_on:
      - openscrapers-postgres
    labels:
      - "traefik.enable=true"
      - "traefik.namespace=openscrapers"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN}`) && PathPrefix(`/`)"
      - "traefik.http.routers.blog.tls.domains[0].main=${DOMAIN}"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.routers.whoami.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.routers.whoami.tls.certresolver=myresolver"
    volumes:
      - ./openpuc_scrapers:/app/openpuc_scrapers
    expose:
      - 8000
    environment:
      <<: *openscraper-env-variables
  reverse-proxy:
    image: traefik:v3.0
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.constraints=Label(`traefik.namespace`,`openscrapers`)"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=mbright@kessler.xyz"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8083:8080"
    volumes:
      - "./volumes/letsencrypt:/letsencrypt"
      - /var/run/docker.sock:/var/run/docker.sock
  # # Airflow Services
  airflow-postgres:
    # image: postgres:13
    # Original image used postgres 13, if anything appears wrong, I think its a good idea to revert to the old image
    image: postgres:17.4-alpine
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: ${AIRFLOW_SQL_DB_PASSWORD}
      POSTGRES_DB: airflow
    volumes:
      - ./volumes/airflow-postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    image: valkey/valkey:alpine
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-standalone:
    <<: *airflow-common
    ports:
      - "3030:8081"
    # network_mode: "host"
    # command: "./entrypoint.sh"

  # airflow-webserver:
  #   <<: *airflow-common
  #   command: webserver
  #   ports:
  #     - "8080:8080"
  #   healthcheck:
  #     test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s
  #   restart: always
  #   depends_on:
  #     <<: *airflow-common-depends-on
  #     airflow-init:
  #       condition: service_completed_successfully
  # airflow-scheduler:
  #   <<: *airflow-common
  #   command: scheduler
  #   healthcheck:
  #     test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s
  #   restart: always
  #   depends_on:
  #     <<: *airflow-common-depends-on
  #     airflow-init:
  #       condition: service_completed_successfully
  #
  # airflow-worker:
  #   <<: *airflow-common
  #   command: celery worker
  #   healthcheck:
  #     test:
  #       - "CMD-SHELL"
  #       - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s
  #   environment:
  #     <<: *airflow-common-env
  #     DUMB_INIT_SETSID: "0"
  #   restart: always
  #   depends_on:
  #     <<: *airflow-common-depends-on
  #     airflow-init:
  #       condition: service_completed_successfully
  #
  # airflow-triggerer:
  #   <<: *airflow-common
  #   command: triggerer
  #   healthcheck:
  #     test:
  #       [
  #         "CMD-SHELL",
  #         'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"',
  #       ]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s
  #   restart: always
  #   depends_on:
  #     <<: *airflow-common-depends-on
  #     airflow-init:
  #       condition: service_completed_successfully
  #
  # airflow-init:
  #   <<: *airflow-common
  #   entrypoint: /bin/bash
  #   # yamllint disable rule:line-length
  #   command:
  #     - -c
  #     - |
  #       if [[ -z "${AIRFLOW_UID}" ]]; then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
  #         echo "If you are on Linux, you SHOULD follow the instructions below to set "
  #         echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
  #         echo "For other operating systems you can get rid of the warning with manually created .env file:"
  #         echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
  #         echo
  #       fi
  #       one_meg=1048576
  #       mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
  #       cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
  #       disk_available=$$(df / | tail -1 | awk '{print $$4}')
  #       warning_resources="false"
  #       if (( mem_available < 4000 )) ; then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
  #         echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
  #         echo
  #         warning_resources="true"
  #       fi
  #       if (( cpus_available < 2 )); then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
  #         echo "At least 2 CPUs recommended. You have $${cpus_available}"
  #         echo
  #         warning_resources="true"
  #       fi
  #       if (( disk_available < one_meg * 10 )); then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
  #         echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
  #         echo
  #         warning_resources="true"
  #       fi
  #       if [[ $${warning_resources} == "true" ]]; then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
  #         echo "Please follow the instructions to increase amount of resources available:"
  #         echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
  #         echo
  #       fi
  #       mkdir -p /sources/logs /sources/dags /sources/plugins
  #       chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
  #       exec /entrypoint airflow version
  #   # yamllint enable rule:line-length
  #   environment:
  #     <<: *airflow-common-env
  #     _AIRFLOW_DB_MIGRATE: "true"
  #     _AIRFLOW_WWW_USER_CREATE: "true"
  #     _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
  #     _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
  #     _PIP_ADDITIONAL_REQUIREMENTS: ""
  #   user: "0:0"
  #   volumes:
  #     - ${AIRFLOW_PROJ_DIR:-.}:/sources
  #
  # airflow-cli:
  #   <<: *airflow-common
  #   profiles:
  #     - debug
  #   environment:
  #     <<: *airflow-common-env
  #     CONNECTION_CHECK_MAX_COUNT: "0"
  #   command:
  #     - bash
  #     - -c
  #     - airflow
